Here's how you can create a Discord bot in C++:

```cpp
#include <dpp/dpp.h>
#include <iostream>
#include <string>

int main() {
    // Create bot instance
    dpp::cluster bot("YOUR_BOT_TOKEN");

    // Log bot events
    bot.on_log(dpp::utility::cout_logger());

    // Message create event
    bot.on_message_create([&bot](const dpp::message_create_t& event) {
        if (event.msg.content == "!ping") {
            bot.message_create(dpp::message(event.msg.channel_id, "Pong!"));
        }

        if (event.msg.content == "!hello") {
            bot.message_create(dpp::message(event.msg.channel_id, "Hello there!"));
        }

        if (event.msg.content == "!userinfo") {
            std::string response = "User ID: " + std::to_string(event.msg.author.id);
            response += "\nUsername: " + event.msg.author.username;
            response += "\nDiscriminator: " + event.msg.author.discriminator;
            bot.message_create(dpp::message(event.msg.channel_id, response));
        }

        if (event.msg.content == "!serverinfo") {
            dpp::guild* g = dpp::find_guild(event.msg.guild_id);
            if (g) {
                std::string response = "Server: " + g->name;
                response += "\nMembers: " + std::to_string(g->member_count);
                response += "\nOwner ID: " + std::to_string(g->owner_id);
                bot.message_create(dpp::message(event.msg.channel_id, response));
            }
        }

        if (event.msg.content.substr(0, 5) == "!echo") {
            std::string echo = event.msg.content.substr(6);
            bot.message_create(dpp::message(event.msg.channel_id, echo));
        }

        if (event.msg.content == "!embed") {
            dpp::embed embed = dpp::embed()
                .set_color(dpp::colors::blue)
                .set_title("Example Embed")
                .set_description("This is an example embedded message")
                .add_field("Field 1", "Value 1", false)
                .add_field("Field 2", "Value 2", false)
                .set_footer(dpp::embed_footer().set_text("Footer text"));
            bot.message_create(dpp::message(event.msg.channel_id, embed));
        }

        if (event.msg.content == "!button") {
            dpp::message msg(event.msg.channel_id, "Click the button!");
            msg.add_component(
                dpp::component().add_component(
                    dpp::component()
                        .set_label("Click me!")
                        .set_type(dpp::cot_button)
                        .set_style(dpp::cos_primary)
                        .set_id("button_click")
                )
            );
            bot.message_create(msg);
        }
    });

    // Button click event
    bot.on_button_click([&bot](const dpp::button_click_t& event) {
        if (event.custom_id == "button_click") {
            event.reply("Button was clicked!");
        }
    });

    // Ready event
    bot.on_ready([&bot](const dpp::ready_t& event) {
        std::cout << "Bot is ready!" << std::endl;
        std::cout << "Logged in as: " << bot.me.username << std::endl;
    });

    // Start the bot
    bot.start(dpp::st_wait);

    return 0;
}
```

This example uses the DPP library (D++ Discord API). Make sure to:

1. Install DPP: `vcpkg install dpp` or build from source
2. Replace `YOUR_BOT_TOKEN` with your actual bot token
3. Compile with C++17 or later: `g++ -std=c++17 bot.cpp -ldpp -o bot`
4. Run the bot: `./bot`

The bot will respond to various commands like `!ping`, `!hello`, `!userinfo`, and more!